from math import prod
num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

# To optimize, if any of the numbers in the 13-digit chunk is 0,
# The product will be 0, so we can throw those out.
def find_value_2(n):
    s = str(n)
    greatest_product = 0
    for (i, _) in enumerate(s):
        chunk = s[i:13+i]
        if "0" not in chunk:
            product = prod([int(i) for i in chunk])
            greatest_product = product if greatest_product < product else greatest_product
    return greatest_product

print(find_value_2(num))

# Find the value of the greatest product in the series.
def find_value(n):
    idx = 0
    s = str(n)
    greatest_product = 0
    while idx < len(s) - 12:
        chunk = s[idx:13+idx] # length of 13
        idx += 1
        if find_product(chunk) > greatest_product:
            greatest_product = find_product(chunk)
    return greatest_product

# Turns the substring into a list of integers
# and multiplies them all together
def find_product(s):
    return prod([int(i) for i in s])

print(find_value(num))